/**
 * @author kawazaki42
 * 
 * Вычисления по формуле.
 * 
 * (11д)
 *     Даны `x`, `y`, `z`.
 *     Вычислить `a`, `b` по заданным формулам (см. задачник)
 * 
 * @see https://ivtipm.github.io/Programming/Glava01/index01.htm#z11
 */

// Для assert
#include <cassert>

// Интерфейсная часть модуля
#include "calc.hpp"


// Пространство имен - единица организации кода.
//
// Проще говоря, это такой "контейнер"
// для различных именованых объектов (функций, переменных, классов...)
// который используют для избежания столкновений имен.


// Пространство имен для модуля.
//
// NOTE: не создается автоматически!
namespace calc {
    /**
     * Вычислить величину `a` по условиям задачи.
     * @param x, y входные данные задачи
     * @see https://ivtipm.github.io/Programming/Glava01/index01.htm#z11
     */
    double calc_a(double x, double y) {
        /// Результат функции.
        double result;
    
        /// sin(y). Избегаем второй вызов функции для скорости
        double siny = sin(y);
    
        result = 2.0 * cos(x - M_PI/6.0);
        result /= 1.0/2.0 + siny*siny;
    
        return result;
    }
    
    /**
     * Вычислить величину `b` по условиям задачи.
     * @param z входные данные задачи
     * @see https://ivtipm.github.io/Programming/Glava01/index01.htm#z11
     */
    double calc_b(double z) {
        /// Результат функции.
        double result;
    
        // z^2. Избегаем повторное вычисление
        double z2 = z*z;
    
        result = z2;
        result /= 3.0 + z2/5.0;
        result += 1;
    
        return result;
    }

    // Пространства имен также бывают вложенными.

    // Тесты для логики программы.
    namespace test {
        // Точность сравнения результатов.
        // const double EPSILON = 1e-6;
        // const double EPSILON;
        
        // Достаточно ли близки два дробных значения?
        //
        // Точнее говоря, не превышает ли отклонение число EPSILON?
        bool is_close(double a, double b) {
            return abs(a - b) < EPSILON;
        }

        // Запустить набор тестов.
        //
        // Завершает программу с ненулевым статусом,
        // если провалится хотя бы один тест.
        void run() {
            // NOTE: используем assert, чтобы отобразить конкретный
            //       непройденный тест

            // Набор тестовых данных
            double x, y, z;

            // Результаты вычислений
            double a, b;

            // Тест 1
            
            // обнуляет числитель величины a
            // pi/2 + pi/6
            // ~2.0943951024
            x = M_PI_2 + M_PI/6;

            // не влияет на величину a
            y = 1234;

            // обнуляет числитель 2го слагаемого величины b
            z = 0;

            a = calc_a(x, y);
            b = calc_b(z);

            assert(is_close(a, 0));
            assert(is_close(b, 1));

            // Тест 2

            // Обнуляет аргумент косинуса в величине a
            // ~0.5235987756
            x = M_PI/6;

            // обнуляет 2ое слагаемое в знаменателе величины a
            y = 0;

            // дает сократимую дробь
            z = 5;

            a = calc_a(x, y);
            b = calc_b(z);

            assert(is_close(a, 4));  // 2 / (1/2) = 2*2 = 4
            assert(is_close(b, 4.125));  // 1 + (25/8) = (33/8) = 4.125

            // Тест 3

            // Обнуляет аргумент косинуса в величине a
            // Косинус будет равен 1.
            // Числитель будет равен 2.
            // ~0.5235987756
            x = M_PI/6;

            // синус будет равен sqrt(2)/2
            // квадрат синуса - 1/2
            // знаменатель - 1
            // ~0.7853981634
            y = M_PI_4;

            // ~2.2360679775
            z = sqrt(5);

            a = calc_a(x, y);
            b = calc_b(z);

            assert(is_close(a, 2));  // 2/1
            assert(is_close(b, 2.25));  // 1 + ( 5 / (3+1) ) = (9/4) = 2.25
        }
    }
}